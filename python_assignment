class FlightRecord:
    def __init__(self, p_id, process, start_time, priority):
        self.p_id = p_id
        self.process = process
        self.start_time = start_time
        self.priority = priority

class FlightTable:
    def __init__(self):
        self.records = []

    def add_record(self, record):
        self.records.append(record)

    def print_table(self):
        print("P_ID\tProcess\tStart Time (ms)\tPriority")
        for record in self.records:
            print(f"{record.p_id}\t{record.process}\t{record.start_time}\t\t{record.priority}")

    def sort_by_p_id(self):
        self.records.sort(key=lambda record: record.p_id)

    def sort_by_start_time(self):
        self.records.sort(key=lambda record: record.start_time)

    def sort_by_priority(self):
        priority_order = {"Low": 1, "MID": 2, "High": 3}
        self.records.sort(key=lambda record: priority_order[record.priority])

if __name__ == "__main__":
    flight_table = FlightTable()

    flight_table.add_record(FlightRecord("P1", "VSCode", 100, "MID"))
    flight_table.add_record(FlightRecord("P23", "Eclipse", 234, "MID"))
    flight_table.add_record(FlightRecord("P93", "Chrome", 189, "High"))
    flight_table.add_record(FlightRecord("P42", "JDK", 9, "High"))
    flight_table.add_record(FlightRecord("P9", "CMD", 7, "High"))
    flight_table.add_record(FlightRecord("P87", "NotePad", 23, "Low"))

    sorting_options = {
        1: flight_table.sort_by_p_id,
        2: flight_table.sort_by_start_time,
        3: flight_table.sort_by_priority
    }

    print("Select sorting parameter:")
    print("1. Sort by P_ID")
    print("2. Sort by Start Time")
    print("3. Sort by Priority")

    choice = int(input("Enter your choice: "))
    sorting_function = sorting_options.get(choice)

    if sorting_function:
        sorting_function()
        flight_table.print_table()
    else:
        print("Invalid choice")
